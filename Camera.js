console.log('=== camera.js –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–û ===');

let canvas = document.getElementById('canvas');
let captureBtn = document.getElementById('capture');
let cameraInput = document.getElementById('camera-input');
let imagePreview = document.getElementById('image-preview');
let isProcessing = false;

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
function updateStatus(message, type = 'default') {
    console.log(`üîÑ Status (${type}): ${message}`);
    
    const statusEl = document.getElementById('status');
    if (statusEl) {
        statusEl.textContent = message;
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ –∫–ª–∞—Å–∏ –∑–∞–º—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö
        if (type === 'processing') {
            statusEl.className = 'word-item';
            statusEl.style.background = 'var(--dark)';
            statusEl.style.color = 'var(--white)';
            statusEl.style.animation = 'pulse 1.5s infinite';
        } else if (type === 'success') {
            statusEl.className = 'word-item';
            statusEl.style.background = 'var(--accent)';
            statusEl.style.color = 'var(--black)';
            statusEl.style.animation = 'none';
        } else if (type === 'error') {
            statusEl.className = 'word-item';
            statusEl.style.background = '#ff4444';
            statusEl.style.color = 'var(--white)';
            statusEl.style.animation = 'none';
        } else {
            statusEl.className = 'word-item';
            statusEl.style.background = '';
            statusEl.style.color = '';
            statusEl.style.animation = 'none';
        }
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∞–º–µ—Ä–∏
function checkCameraSupport() {
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∞–º–µ—Ä–∏...');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ getUserMedia (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ, –∞–ª–µ –∫–æ—Ä–∏—Å–Ω–æ –∑–Ω–∞—Ç–∏)
    const hasGetUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia;
    console.log('üìπ getUserMedia –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:', hasGetUserMedia);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ File API
    const hasFileAPI = window.File && window.FileReader && window.FileList && window.Blob;
    console.log('üìÅ File API –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:', hasFileAPI);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ input[type="file"]
    const testInput = document.createElement('input');
    testInput.type = 'file';
    const hasFileInput = testInput.type === 'file';
    console.log('üì§ File input –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:', hasFileInput);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ capture –∞—Ç—Ä–∏–±—É—Ç—É
    const hasCapture = 'capture' in testInput;
    console.log('üì∏ Capture –∞—Ç—Ä–∏–±—É—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è:', hasCapture);
    
    if (!hasFileAPI || !hasFileInput) {
        updateStatus('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤', 'error');
        return false;
    }
    
    if (!hasCapture) {
        console.warn('‚ö†Ô∏è Capture –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è, –∞–ª–µ file input –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ');
    }
    
    return true;
}

// –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É/–∫–∞–º–µ—Ä–∏
function openCamera() {
    console.log('üì∏ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –∫–Ω–æ–ø–∫—É –∫–∞–º–µ—Ä–∏');
    
    if (!cameraInput) {
        console.error('‚ùå Camera input –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        updateStatus('–ü–æ–º–∏–ª–∫–∞: –µ–ª–µ–º–µ–Ω—Ç –∫–∞–º–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
        return;
    }
    
    console.log('üéØ –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É/–∫–∞–º–µ—Ä–∏...');
    updateStatus('–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–∞–º–µ—Ä—É...', 'processing');
    
    try {
        // –ü—Ä–æ–≥—Ä–∞–º–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ input
        cameraInput.click();
        console.log('‚úÖ click() –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É click():', error);
        updateStatus('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞–º–µ—Ä–∏', 'error');
    }
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–∞–π–ª—É
function handleFileSelect(event) {
    console.log('üìÅ handleFileSelect –≤–∏–∫–ª–∏–∫–∞–Ω–æ');
    console.log('üìÅ Event:', event);
    console.log('üìÅ Files:', event.target.files);
    
    const file = event.target.files[0];
    
    if (!file) {
        console.log('‚ùå –§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ –∞–±–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ');
        updateStatus('–§–∞–π–ª –Ω–µ –æ–±—Ä–∞–Ω–æ', 'error');
        return;
    }

    console.log('‚úÖ –§–∞–π–ª –æ–±—Ä–∞–Ω–æ:', {
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: new Date(file.lastModified).toLocaleString()
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É —Ñ–∞–π–ª—É
    if (!file.type.startsWith('image/')) {
        console.error('‚ùå –û–±—Ä–∞–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º:', file.type);
        updateStatus('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è', 'error');
        return;
    }
    
    updateStatus('–§–∞–π–ª –æ–±—Ä–∞–Ω–æ, –æ–±—Ä–æ–±–ª—è—î–º–æ...', 'processing');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤'—é
    showImagePreview(file);
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    processImageFile(file);
}

// –ü–æ–∫–∞–∑ –ø—Ä–µ–≤'—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function showImagePreview(file) {
    console.log('üñºÔ∏è –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–µ–≤\'—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
    
    if (!imagePreview) {
        console.error('‚ùå Image preview –µ–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
    }

    const reader = new FileReader();
    
    reader.onload = function(e) {
        imagePreview.src = e.target.result;
        imagePreview.style.display = 'block';
        console.log('‚úÖ –ü—Ä–µ–≤\'—é –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    };
    
    reader.onerror = function(error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–µ–≤\'—é:', error);
        updateStatus('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–µ–≤\'—é', 'error');
    };
    
    reader.readAsDataURL(file);
}

// –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
async function processImageFile(file) {
    if (isProcessing) {
        console.log('‚è≥ –û–±—Ä–æ–±–∫–∞ –≤–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è...');
        return;
    }

    console.log('üîÑ –ü–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');

    try {
        isProcessing = true;
        if (captureBtn) captureBtn.disabled = true;
        
        updateStatus('–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...', 'processing');

        // –°—Ç–≤–æ—Ä—é—î–º–æ canvas –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const imageCanvas = await createCanvasFromFile(file);
        
        const megapixels = (imageCanvas.width * imageCanvas.height / 1000000).toFixed(2);
        console.log('‚úÖ Canvas —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', {
            width: imageCanvas.width,
            height: imageCanvas.height,
            megapixels: megapixels + 'MP'
        });

        updateStatus('–ó–∞–ø—É—Å–∫–∞—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É...', 'processing');

        // –ó–∞–ø—É—Å–∫–∞—î–º–æ OCR
        if (typeof ocrProcessor !== 'undefined') {
            console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞—î–º–æ OCR –ø—Ä–æ—Ü–µ—Å–æ—Ä');
            await ocrProcessor.processImage(imageCanvas);
        } else {
            console.error('‚ùå OCR –ø—Ä–æ—Ü–µ—Å–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π');
            updateStatus('OCR –ø—Ä–æ—Ü–µ—Å–æ—Ä –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ', 'error');
        }

        console.log('‚úÖ –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
        updateStatus('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ' + error.message, 'error');
    } finally {
        isProcessing = false;
        if (captureBtn) captureBtn.disabled = false;
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è canvas –∑ —Ñ–∞–π–ª—É
function createCanvasFromFile(file) {
    console.log('üé® –°—Ç–≤–æ—Ä—é—î–º–æ canvas –∑ —Ñ–∞–π–ª—É');
    
    return new Promise((resolve, reject) => {
        const img = new Image();
        
        img.onload = function() {
            try {
                console.log('üñºÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', {
                    naturalWidth: img.naturalWidth,
                    naturalHeight: img.naturalHeight
                });
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ canvas
                canvas.width = img.naturalWidth;
                canvas.height = img.naturalHeight;
                
                const context = canvas.getContext('2d');
                
                // –û—á–∏—â—É—î–º–æ canvas
                context.clearRect(0, 0, canvas.width, canvas.height);
                
                // –ú–∞–ª—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ canvas
                context.drawImage(img, 0, 0);
                
                console.log('‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–º–∞–ª—å–æ–≤–∞–Ω–æ –Ω–∞ canvas');
                resolve(canvas);
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–∞–ª—é–≤–∞–Ω–Ω—è –Ω–∞ canvas:', error);
                reject(new Error('–ü–æ–º–∏–ª–∫–∞ –º–∞–ª—é–≤–∞–Ω–Ω—è –Ω–∞ canvas: ' + error.message));
            }
        };
        
        img.onerror = function(error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', error);
            reject(new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'));
        };
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        const reader = new FileReader();
        reader.onload = function(e) {
            console.log('üìñ FileReader –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Ñ–∞–π–ª');
            img.src = e.target.result;
        };
        reader.onerror = function(error) {
            console.error('‚ùå FileReader –ø–æ–º–∏–ª–∫–∞:', error);
            reject(new Error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É'));
        };
        
        console.log('üìñ –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ FileReader');
        reader.readAsDataURL(file);
    });
}

// –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
function reset() {
    console.log('üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–∞–º–µ—Ä–∏');
    
    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø—Ä–µ–≤'—é
    if (imagePreview) {
        imagePreview.style.display = 'none';
        imagePreview.src = '';
    }
    
    // –û—á–∏—â—É—î–º–æ input
    if (cameraInput) {
        cameraInput.value = '';
    }
    
    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
    updateStatus('–ì–æ—Ç–æ–≤–æ –¥–æ —Ñ–æ—Ç–æ');
    
    // –í–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫—É
    if (captureBtn) {
        captureBtn.disabled = false;
    }
    
    console.log('‚úÖ –°—Ç–∞–Ω –∫–∞–º–µ—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è camera.js');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É
    if (!checkCameraSupport()) {
        return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM:');
    console.log('- canvas:', !!canvas);
    console.log('- captureBtn:', !!captureBtn);
    console.log('- cameraInput:', !!cameraInput);
    console.log('- imagePreview:', !!imagePreview);
    
    if (!captureBtn) {
        console.error('‚ùå –ö–Ω–æ–ø–∫–∞ capture –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
        updateStatus('–ü–æ–º–∏–ª–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞', 'error');
        return;
    }
    
    if (!cameraInput) {
        console.error('‚ùå Input camera-input –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
        updateStatus('–ü–æ–º–∏–ª–∫–∞: input –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π', 'error');
        return;
    }
    
    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    console.log('üîó –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π');
    
    captureBtn.addEventListener('click', function() {
        console.log('üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞');
        openCamera();
    });
    
    cameraInput.addEventListener('change', function(event) {
        console.log('üìÅ Input change event');
        handleFileSelect(event);
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è debugging
    cameraInput.addEventListener('click', function() {
        console.log('üñ±Ô∏è Camera input –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏–π');
    });
    
    updateStatus('–ì–æ—Ç–æ–≤–æ –¥–æ —Ñ–æ—Ç–æ');
    
    // –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && typeof ocrProcessor !== 'undefined') {
            console.log('‚å®Ô∏è Escape –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ - —Å–∫–∏–¥–∞—î–º–æ');
            ocrProcessor.reset();
        }
    });
    
    console.log('‚úÖ Camera.js –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏
window.cameraModule = {
    reset: reset,
    updateStatus: updateStatus,
    openCamera: openCamera
};

console.log('‚úÖ camera.js –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
